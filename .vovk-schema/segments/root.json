{
  "$schema": "https://vovk.dev/api/schema/v3/segment.json",
  "emitSchema": true,
  "segmentName": "",
  "controllers": {
    "BasicRPC": {
      "rpcModuleName": "BasicRPC",
      "originalControllerName": "BasicController",
      "prefix": "basic",
      "handlers": {
        "getHello": {
          "path": "greeting",
          "httpMethod": "GET",
          "openapi": {
            "summary": "Get a greeting",
            "description": "Get a greeting from the server"
          }
        },
        "postHello": {
          "path": "greeting",
          "httpMethod": "POST",
          "openapi": {
            "summary": "Post a greeting",
            "description": "Post a greeting to the server"
          }
        }
      }
    },
    "BasicRPCWithService": {
      "rpcModuleName": "BasicRPCWithService",
      "originalControllerName": "BasicControllerWithService",
      "prefix": "basic-with-service",
      "handlers": {
        "getHello": {
          "path": "greeting",
          "httpMethod": "GET",
          "openapi": {
            "summary": "Get a greeting using a service",
            "description": "Get a greeting from the server using a service"
          }
        }
      }
    },
    "StreamRPC": {
      "rpcModuleName": "StreamRPC",
      "originalControllerName": "StreamController",
      "prefix": "stream",
      "handlers": {
        "streamTokens": {
          "path": "tokens",
          "httpMethod": "GET",
          "openapi": {
            "summary": "Stream tokens",
            "description": "Stream tokens to the client"
          }
        }
      }
    },
    "StreamResponseObjectRPC": {
      "rpcModuleName": "StreamResponseObjectRPC",
      "originalControllerName": "StreamResponseObjectController",
      "prefix": "stream-with-object",
      "handlers": {
        "streamTokens": {
          "path": "tokens",
          "httpMethod": "GET",
          "openapi": {
            "summary": "Stream tokens using Response object",
            "description": "Stream tokens to the client using Response object"
          }
        }
      }
    },
    "OpenAiRPC": {
      "rpcModuleName": "OpenAiRPC",
      "originalControllerName": "OpenAiController",
      "prefix": "openai",
      "handlers": {
        "createChatCompletion": {
          "path": "chat",
          "httpMethod": "POST",
          "openapi": {
            "summary": "Create a chat completion",
            "description": "Create a chat completion using OpenAI and yield the response"
          }
        }
      }
    },
    "ZodRPC": {
      "rpcModuleName": "ZodRPC",
      "originalControllerName": "ZodController",
      "prefix": "zod",
      "handlers": {
        "updateUser": {
          "validation": {
            "body": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "minLength": 2,
                  "maxLength": 20
                },
                "email": {
                  "type": "string",
                  "format": "email",
                  "pattern": "^(?!\\.)(?!.*\\.\\.)([A-Za-z0-9_'+\\-\\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\\-]*\\.)+[A-Za-z]{2,}$"
                }
              },
              "required": [
                "name",
                "email"
              ],
              "additionalProperties": {
                "not": {}
              }
            },
            "query": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid",
                  "pattern": "^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$"
                },
                "yyy": {
                  "type": "number"
                },
                "xxx": {
                  "type": "object",
                  "properties": {
                    "yyy": {
                      "type": "string",
                      "format": "time",
                      "pattern": "^([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(\\.\\d+)?$"
                    }
                  },
                  "required": [
                    "yyy"
                  ]
                }
              },
              "required": [
                "id",
                "yyy",
                "xxx"
              ]
            },
            "params": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid",
                  "pattern": "^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$"
                }
              },
              "required": [
                "id"
              ]
            },
            "output": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "user": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "minLength": 2,
                      "maxLength": 20
                    },
                    "email": {
                      "type": "string",
                      "format": "email",
                      "pattern": "^(?!\\.)(?!.*\\.\\.)([A-Za-z0-9_'+\\-\\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\\-]*\\.)+[A-Za-z]{2,}$"
                    },
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "pattern": "^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$"
                    }
                  },
                  "required": [
                    "name",
                    "email",
                    "id"
                  ],
                  "additionalProperties": {
                    "not": {}
                  }
                }
              },
              "required": [
                "success",
                "user"
              ],
              "additionalProperties": {
                "not": {}
              }
            }
          },
          "path": "update-user/:id",
          "httpMethod": "POST",
          "openapi": {
            "responses": {
              "400": {
                "description": "400 Bad Request",
                "content": {
                  "application/json": {
                    "schema": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/VovkErrorResponse"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "message": {
                              "type": "string",
                              "enum": [
                                "Validation error 11",
                                "Validation error 33"
                              ]
                            },
                            "statusCode": {
                              "type": "integer",
                              "enum": [
                                400
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              },
              "500": {
                "description": "500 Internal Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/VovkErrorResponse"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "message": {
                              "type": "string",
                              "enum": [
                                "Validation error 22"
                              ]
                            },
                            "statusCode": {
                              "type": "integer",
                              "enum": [
                                500
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            },
            "summary": "Create a user with Zod",
            "description": "Create a user with Zod for body validation"
          }
        }
      }
    },
    "YupRPC": {
      "rpcModuleName": "YupRPC",
      "originalControllerName": "YupController",
      "prefix": "yup",
      "handlers": {
        "createUser": {
          "validation": {
            "body": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "minLength": 2,
                  "maxLength": 20
                },
                "email": {
                  "type": "string",
                  "format": "email"
                }
              },
              "required": [
                "name",
                "email"
              ]
            }
          },
          "path": "create-user",
          "httpMethod": "POST",
          "openapi": {
            "summary": "Create a user with Yup",
            "description": "Create a user with Yup for body validation"
          }
        }
      }
    },
    "DtoRPC": {
      "rpcModuleName": "DtoRPC",
      "originalControllerName": "DtoController",
      "prefix": "dto",
      "handlers": {
        "createUser": {
          "validation": {
            "body": {
              "x-isDto": true,
              "definitions": {},
              "properties": {
                "name": {
                  "maxLength": 20,
                  "type": "string",
                  "minLength": 2
                },
                "email": {
                  "format": "email",
                  "type": "string"
                }
              },
              "type": "object",
              "required": [
                "name",
                "email"
              ]
            }
          },
          "path": "create-user",
          "httpMethod": "POST",
          "openapi": {
            "summary": "Create a user with DTO",
            "description": "Create a user with DTO for body validation"
          }
        }
      }
    },
    "AiSdkRPC": {
      "rpcModuleName": "AiSdkRPC",
      "originalControllerName": "AiSdkController",
      "prefix": "ai-sdk",
      "handlers": {
        "chat": {
          "path": "chat",
          "httpMethod": "POST",
          "openapi": {
            "summary": "Vercel AI SDK",
            "description": "Uses [@ai-sdk/openai](https://www.npmjs.com/package/@ai-sdk/openai) and ai packages to chat with an AI model",
            "x-codeSamples": [
              {
                "label": "AI SDK",
                "lang": "typescript",
                "source": "xxxx"
              }
            ]
          }
        }
      }
    },
    "ProxyRPC": {
      "rpcModuleName": "ProxyRPC",
      "originalControllerName": "ProxyController",
      "prefix": "proxy",
      "handlers": {
        "getHello": {
          "path": "greeting",
          "httpMethod": "GET",
          "openapi": {
            "summary": "Proxy endpoint",
            "description": "Get a greeting from vovk.dev"
          }
        }
      }
    },
    "UserRPC": {
      "rpcModuleName": "UserRPC",
      "originalControllerName": "UserController",
      "prefix": "users",
      "handlers": {
        "updateUser": {
          "validation": {
            "body": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "age": {
                  "type": "number",
                  "minimum": 0
                },
                "email": {
                  "type": "string",
                  "format": "email",
                  "pattern": "^(?!\\.)(?!.*\\.\\.)([A-Za-z0-9_'+\\-\\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\\-]*\\.)+[A-Za-z]{2,}$"
                }
              },
              "required": [
                "name",
                "age",
                "email"
              ]
            },
            "query": {
              "type": "object",
              "properties": {
                "notify": {
                  "enum": [
                    "email",
                    "push",
                    "none"
                  ]
                }
              },
              "required": [
                "notify"
              ]
            },
            "params": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid",
                  "pattern": "^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$"
                }
              },
              "required": [
                "id"
              ]
            },
            "output": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                }
              },
              "required": [
                "success"
              ]
            }
          },
          "path": ":id",
          "httpMethod": "POST",
          "openapi": {
            "summary": "Update user",
            "description": "Update user by ID with Zod validation"
          }
        }
      }
    },
    "UserYupRPC": {
      "rpcModuleName": "UserYupRPC",
      "originalControllerName": "UserYupController",
      "prefix": "users-yup",
      "handlers": {
        "updateUser": {
          "validation": {
            "body": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "User full name"
                },
                "age": {
                  "type": "number",
                  "minimum": 0,
                  "description": "User age"
                },
                "email": {
                  "type": "string",
                  "format": "email",
                  "description": "User email"
                }
              },
              "required": [
                "name",
                "age",
                "email"
              ],
              "description": "User object"
            },
            "query": {
              "type": "object",
              "properties": {
                "notify": {
                  "type": "string",
                  "enum": [
                    "email",
                    "push",
                    "none"
                  ],
                  "description": "Notification type"
                }
              },
              "required": [
                "notify"
              ]
            },
            "params": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "User ID"
                }
              },
              "required": [
                "id"
              ]
            },
            "output": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Success status"
                }
              },
              "required": [
                "success"
              ],
              "description": "Response object"
            }
          },
          "path": ":id",
          "httpMethod": "POST",
          "openapi": {
            "summary": "Update user",
            "description": "Update user by ID with Yup validation"
          }
        }
      }
    },
    "UserDtoRPC": {
      "rpcModuleName": "UserDtoRPC",
      "originalControllerName": "UserDtoController",
      "prefix": "users-dto",
      "handlers": {
        "updateUser": {
          "validation": {
            "body": {
              "x-isDto": true,
              "definitions": {},
              "properties": {
                "name": {
                  "type": "string",
                  "description": "User full name"
                },
                "age": {
                  "minimum": 0,
                  "type": "number",
                  "description": "User age"
                },
                "email": {
                  "format": "email",
                  "type": "string",
                  "description": "User email"
                }
              },
              "type": "object",
              "required": [
                "name",
                "age",
                "email"
              ],
              "description": "User object"
            },
            "query": {
              "x-isDto": true,
              "definitions": {},
              "properties": {
                "notify": {
                  "type": "string",
                  "enum": [
                    "email",
                    "push",
                    "none"
                  ],
                  "description": "Notification type"
                }
              },
              "type": "object",
              "required": [
                "notify"
              ],
              "description": "Query parameters"
            },
            "params": {
              "x-isDto": true,
              "definitions": {},
              "properties": {
                "id": {
                  "format": "uuid",
                  "type": "string",
                  "description": "User ID"
                }
              },
              "type": "object",
              "required": [
                "id"
              ],
              "description": "Path parameters"
            },
            "output": {
              "x-isDto": true,
              "definitions": {},
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Success status"
                }
              },
              "type": "object",
              "required": [
                "success"
              ],
              "description": "Response object"
            }
          },
          "path": ":id",
          "httpMethod": "POST",
          "openapi": {
            "summary": "Update user",
            "description": "Update user by ID with DTO validation"
          }
        }
      }
    }
  }
}