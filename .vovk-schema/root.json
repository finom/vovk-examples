{
  "$schema": "https://vovk.dev/api/spec/v3/segment.json",
  "emitSchema": true,
  "segmentName": "",
  "segmentType": "segment",
  "controllers": {
    "HelloWorldRPC": {
      "rpcModuleName": "HelloWorldRPC",
      "originalControllerName": "HelloWorldController",
      "prefix": "hello-world",
      "handlers": {
        "getHello": {
          "path": "greeting",
          "httpMethod": "GET",
          "openapi": {
            "summary": "Get a greeting",
            "description": "Get a greeting from the server"
          }
        },
        "postHello": {
          "path": "greeting",
          "httpMethod": "POST",
          "openapi": {
            "summary": "Post a greeting",
            "description": "Post a greeting to the server"
          }
        }
      }
    },
    "BasicRPCWithService": {
      "rpcModuleName": "BasicRPCWithService",
      "originalControllerName": "HelloWorldControllerWithService",
      "prefix": "hello-world-with-service",
      "handlers": {
        "getHello": {
          "path": "greeting",
          "httpMethod": "GET",
          "openapi": {
            "summary": "Get a greeting using a service",
            "description": "Get a greeting from the server using a service"
          }
        }
      }
    },
    "StreamRPC": {
      "rpcModuleName": "StreamRPC",
      "originalControllerName": "StreamController",
      "prefix": "stream",
      "handlers": {
        "streamTokens": {
          "path": "tokens",
          "httpMethod": "GET",
          "openapi": {
            "summary": "Stream tokens",
            "description": "Stream tokens to the client"
          }
        }
      }
    },
    "StreamResponseObjectRPC": {
      "rpcModuleName": "StreamResponseObjectRPC",
      "originalControllerName": "StreamResponseObjectController",
      "prefix": "stream-with-object",
      "handlers": {
        "streamTokens": {
          "path": "tokens",
          "httpMethod": "GET",
          "openapi": {
            "summary": "Stream tokens using Response object",
            "description": "Stream tokens to the client using Response object"
          }
        }
      }
    },
    "OpenAiRPC": {
      "rpcModuleName": "OpenAiRPC",
      "originalControllerName": "OpenAiController",
      "prefix": "openai",
      "handlers": {
        "createChatCompletion": {
          "path": "chat",
          "httpMethod": "POST",
          "openapi": {
            "summary": "Create a chat completion",
            "description": "Create a chat completion using OpenAI and yield the response"
          }
        }
      }
    },
    "AiSdkRPC": {
      "rpcModuleName": "AiSdkRPC",
      "originalControllerName": "AiSdkController",
      "prefix": "ai-sdk",
      "handlers": {
        "chat": {
          "path": "chat",
          "httpMethod": "POST",
          "openapi": {
            "summary": "Vercel AI SDK",
            "description": "Uses [@ai-sdk/openai](https://www.npmjs.com/package/@ai-sdk/openai) and ai packages to chat with an AI model"
          }
        },
        "functionCalling": {
          "path": "function-calling",
          "httpMethod": "POST",
          "openapi": {
            "summary": "Function Calling",
            "description": "Uses [@ai-sdk/openai](https://www.npmjs.com/package/@ai-sdk/openai) and ai packages to call a function"
          }
        }
      }
    },
    "ProxyRPC": {
      "rpcModuleName": "ProxyRPC",
      "originalControllerName": "ProxyController",
      "prefix": "proxy",
      "handlers": {
        "getHello": {
          "path": "greeting",
          "httpMethod": "GET",
          "openapi": {
            "summary": "Proxy endpoint",
            "description": "Get a greeting from vovk.dev"
          }
        }
      }
    },
    "UserZodRPC": {
      "rpcModuleName": "UserZodRPC",
      "originalControllerName": "UserController",
      "prefix": "users",
      "handlers": {
        "updateUser": {
          "validation": {
            "body": {
              "$schema": "https://json-schema.org/draft/2020-12/schema",
              "description": "User object",
              "type": "object",
              "properties": {
                "name": {
                  "description": "User full name",
                  "type": "string"
                },
                "age": {
                  "description": "User age",
                  "type": "number",
                  "minimum": 0
                },
                "email": {
                  "description": "User email",
                  "type": "string",
                  "format": "email",
                  "pattern": "^(?!\\.)(?!.*\\.\\.)([A-Za-z0-9_'+\\-\\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\\-]*\\.)+[A-Za-z]{2,}$"
                }
              },
              "required": [
                "name",
                "age",
                "email"
              ],
              "additionalProperties": false
            },
            "query": {
              "$schema": "https://json-schema.org/draft/2020-12/schema",
              "type": "object",
              "properties": {
                "notify": {
                  "description": "Notification type",
                  "type": "string",
                  "enum": [
                    "email",
                    "push",
                    "none"
                  ]
                }
              },
              "required": [
                "notify"
              ],
              "additionalProperties": false
            },
            "params": {
              "$schema": "https://json-schema.org/draft/2020-12/schema",
              "type": "object",
              "properties": {
                "id": {
                  "description": "User ID",
                  "type": "string",
                  "format": "uuid",
                  "pattern": "^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$"
                }
              },
              "required": [
                "id"
              ],
              "additionalProperties": false
            },
            "output": {
              "$schema": "https://json-schema.org/draft/2020-12/schema",
              "description": "Response object",
              "type": "object",
              "properties": {
                "success": {
                  "description": "Success status",
                  "type": "boolean"
                }
              },
              "required": [
                "success"
              ],
              "additionalProperties": false
            }
          },
          "path": "{id}",
          "httpMethod": "POST",
          "openapi": {
            "summary": "Update user",
            "description": "Update user by ID with Zod validation"
          }
        }
      }
    },
    "UserYupRPC": {
      "rpcModuleName": "UserYupRPC",
      "originalControllerName": "UserYupController",
      "prefix": "users-yup",
      "handlers": {
        "updateUser": {
          "validation": {
            "body": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "User full name"
                },
                "age": {
                  "type": "number",
                  "minimum": 0,
                  "description": "User age"
                },
                "email": {
                  "type": "string",
                  "format": "email",
                  "description": "User email"
                }
              },
              "required": [
                "name",
                "age",
                "email"
              ],
              "description": "User object"
            },
            "query": {
              "type": "object",
              "properties": {
                "notify": {
                  "type": "string",
                  "enum": [
                    "email",
                    "push",
                    "none"
                  ],
                  "description": "Notification type"
                }
              },
              "required": [
                "notify"
              ]
            },
            "params": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "User ID"
                }
              },
              "required": [
                "id"
              ]
            },
            "output": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Success status"
                }
              },
              "required": [
                "success"
              ],
              "description": "Response object"
            }
          },
          "path": "{id}",
          "httpMethod": "POST",
          "openapi": {
            "summary": "Update user",
            "description": "Update user by ID with Yup validation"
          }
        }
      }
    },
    "UserDtoRPC": {
      "rpcModuleName": "UserDtoRPC",
      "originalControllerName": "UserDtoController",
      "prefix": "users-dto",
      "handlers": {
        "updateUser": {
          "validation": {
            "body": {
              "x-isDto": true,
              "definitions": {},
              "properties": {
                "name": {
                  "type": "string",
                  "description": "User full name"
                },
                "age": {
                  "minimum": 0,
                  "type": "number",
                  "description": "User age"
                },
                "email": {
                  "format": "email",
                  "type": "string",
                  "description": "User email"
                }
              },
              "type": "object",
              "required": [
                "name",
                "age",
                "email"
              ],
              "description": "User object"
            },
            "query": {
              "x-isDto": true,
              "definitions": {},
              "properties": {
                "notify": {
                  "type": "string",
                  "enum": [
                    "email",
                    "push",
                    "none"
                  ],
                  "description": "Notification type"
                }
              },
              "type": "object",
              "required": [
                "notify"
              ],
              "description": "Query parameters"
            },
            "params": {
              "x-isDto": true,
              "definitions": {},
              "properties": {
                "id": {
                  "format": "uuid",
                  "type": "string",
                  "description": "User ID"
                }
              },
              "type": "object",
              "required": [
                "id"
              ],
              "description": "Path parameters"
            },
            "output": {
              "x-isDto": true,
              "definitions": {},
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Success status"
                }
              },
              "type": "object",
              "required": [
                "success"
              ],
              "description": "Response object"
            }
          },
          "path": "{id}",
          "httpMethod": "POST",
          "openapi": {
            "summary": "Update user",
            "description": "Update user by ID with DTO validation"
          }
        }
      }
    },
    "ProgressiveRPC": {
      "rpcModuleName": "ProgressiveRPC",
      "originalControllerName": "ProgressiveController",
      "prefix": "progressive",
      "handlers": {
        "streamProgressiveResponse": {
          "validation": {
            "iteration": {
              "$schema": "https://json-schema.org/draft/2020-12/schema",
              "anyOf": [
                {
                  "type": "object",
                  "properties": {
                    "users": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number"
                          },
                          "name": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "name"
                        ],
                        "additionalProperties": false
                      }
                    }
                  },
                  "required": [
                    "users"
                  ],
                  "additionalProperties": false
                },
                {
                  "type": "object",
                  "properties": {
                    "tasks": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number"
                          },
                          "title": {
                            "type": "string"
                          },
                          "completed": {
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "id",
                          "title",
                          "completed"
                        ],
                        "additionalProperties": false
                      }
                    }
                  },
                  "required": [
                    "tasks"
                  ],
                  "additionalProperties": false
                }
              ]
            }
          },
          "path": "",
          "httpMethod": "GET"
        }
      }
    },
    "PollRPC": {
      "rpcModuleName": "PollRPC",
      "originalControllerName": "PollController",
      "prefix": "poll",
      "handlers": {
        "streamPollResponse": {
          "validation": {
            "query": {
              "$schema": "https://json-schema.org/draft/2020-12/schema",
              "type": "object",
              "properties": {
                "i": {
                  "type": "string"
                }
              },
              "required": [
                "i"
              ],
              "additionalProperties": false
            },
            "iteration": {
              "$schema": "https://json-schema.org/draft/2020-12/schema",
              "type": "object",
              "properties": {
                "i": {
                  "type": "number"
                }
              },
              "required": [
                "i"
              ],
              "additionalProperties": false
            }
          },
          "path": "",
          "httpMethod": "GET"
        }
      }
    }
  }
}