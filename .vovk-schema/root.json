{
  "$schema": "https://vovk.dev/api/schema/v3/segment.json",
  "emitSchema": true,
  "segmentName": "",
  "segmentType": "segment",
  "controllers": {
    "UserZodRPC": {
      "rpcModuleName": "UserZodRPC",
      "originalControllerName": "UserZodController",
      "prefix": "users-zod",
      "handlers": {
        "updateUser": {
          "validation": {
            "body": {
              "$schema": "https://json-schema.org/draft/2020-12/schema",
              "description": "User object",
              "type": "object",
              "properties": {
                "name": {
                  "description": "User full name",
                  "type": "string"
                },
                "age": {
                  "description": "User age",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 120
                },
                "email": {
                  "description": "User email",
                  "type": "string",
                  "format": "email",
                  "pattern": "^(?!\\.)(?!.*\\.\\.)([A-Za-z0-9_'+\\-\\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\\-]*\\.)+[A-Za-z]{2,}$"
                }
              },
              "required": [
                "name",
                "age",
                "email"
              ],
              "additionalProperties": false
            },
            "query": {
              "$schema": "https://json-schema.org/draft/2020-12/schema",
              "type": "object",
              "properties": {
                "notify": {
                  "description": "Notification type",
                  "type": "string",
                  "enum": [
                    "email",
                    "push",
                    "none"
                  ]
                }
              },
              "required": [
                "notify"
              ],
              "additionalProperties": false
            },
            "params": {
              "$schema": "https://json-schema.org/draft/2020-12/schema",
              "type": "object",
              "properties": {
                "id": {
                  "description": "User ID",
                  "type": "string",
                  "format": "uuid",
                  "pattern": "^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$"
                }
              },
              "required": [
                "id"
              ],
              "additionalProperties": false
            },
            "output": {
              "$schema": "https://json-schema.org/draft/2020-12/schema",
              "description": "Response object",
              "type": "object",
              "properties": {
                "success": {
                  "description": "Success status",
                  "type": "boolean"
                }
              },
              "required": [
                "success"
              ],
              "additionalProperties": false
            }
          },
          "operationObject": {
            "summary": "Update user (Zod)",
            "description": "Update user by ID with Zod validation"
          },
          "path": "{id}",
          "httpMethod": "POST"
        }
      }
    },
    "UserZodWithServiceRPC": {
      "rpcModuleName": "UserZodWithServiceRPC",
      "originalControllerName": "UserZodWithServiceController",
      "prefix": "users-zod-with-service",
      "handlers": {
        "updateUser": {
          "validation": {
            "body": {
              "$schema": "https://json-schema.org/draft/2020-12/schema",
              "description": "User object",
              "type": "object",
              "properties": {
                "name": {
                  "description": "User full name",
                  "type": "string"
                },
                "age": {
                  "description": "User age",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 120
                },
                "email": {
                  "description": "User email",
                  "type": "string",
                  "format": "email",
                  "pattern": "^(?!\\.)(?!.*\\.\\.)([A-Za-z0-9_'+\\-\\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\\-]*\\.)+[A-Za-z]{2,}$"
                }
              },
              "required": [
                "name",
                "age",
                "email"
              ],
              "additionalProperties": false
            },
            "query": {
              "$schema": "https://json-schema.org/draft/2020-12/schema",
              "type": "object",
              "properties": {
                "notify": {
                  "description": "Notification type",
                  "type": "string",
                  "enum": [
                    "email",
                    "push",
                    "none"
                  ]
                }
              },
              "required": [
                "notify"
              ],
              "additionalProperties": false
            },
            "params": {
              "$schema": "https://json-schema.org/draft/2020-12/schema",
              "type": "object",
              "properties": {
                "id": {
                  "description": "User ID",
                  "type": "string",
                  "format": "uuid",
                  "pattern": "^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$"
                }
              },
              "required": [
                "id"
              ],
              "additionalProperties": false
            },
            "output": {
              "$schema": "https://json-schema.org/draft/2020-12/schema",
              "description": "Response object",
              "type": "object",
              "properties": {
                "success": {
                  "description": "Success status",
                  "type": "boolean"
                },
                "id": {
                  "description": "User ID",
                  "type": "string",
                  "format": "uuid",
                  "pattern": "^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$"
                }
              },
              "required": [
                "success",
                "id"
              ],
              "additionalProperties": false
            }
          },
          "operationObject": {
            "summary": "Update user (Zod with service)",
            "description": "Update user by ID with Zod validation"
          },
          "path": "{id}",
          "httpMethod": "POST"
        }
      }
    },
    "UserYupRPC": {
      "rpcModuleName": "UserYupRPC",
      "originalControllerName": "UserYupController",
      "prefix": "users-yup",
      "handlers": {
        "updateUser": {
          "validation": {
            "body": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "User full name"
                },
                "age": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 120,
                  "description": "User age"
                },
                "email": {
                  "type": "string",
                  "format": "email",
                  "description": "User email"
                }
              },
              "required": [
                "name",
                "age",
                "email"
              ],
              "description": "User object"
            },
            "query": {
              "type": "object",
              "properties": {
                "notify": {
                  "type": "string",
                  "enum": [
                    "email",
                    "push",
                    "none"
                  ],
                  "description": "Notification type"
                }
              },
              "required": [
                "notify"
              ]
            },
            "params": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "User ID"
                }
              },
              "required": [
                "id"
              ]
            },
            "output": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Success status"
                }
              },
              "required": [
                "success"
              ],
              "description": "Response object"
            }
          },
          "operationObject": {
            "summary": "Update user (Yup)",
            "description": "Update user by ID with Yup validation"
          },
          "path": "{id}",
          "httpMethod": "POST"
        }
      }
    },
    "UserDtoRPC": {
      "rpcModuleName": "UserDtoRPC",
      "originalControllerName": "UserDtoController",
      "prefix": "users-dto",
      "handlers": {
        "updateUser": {
          "validation": {
            "body": {
              "x-isDto": true,
              "definitions": {},
              "properties": {
                "name": {
                  "type": "string",
                  "description": "User full name"
                },
                "age": {
                  "maximum": 120,
                  "type": "number",
                  "minimum": 0,
                  "description": "User age"
                },
                "email": {
                  "format": "email",
                  "type": "string",
                  "description": "User email"
                }
              },
              "type": "object",
              "required": [
                "name",
                "age",
                "email"
              ],
              "description": "User object"
            },
            "query": {
              "x-isDto": true,
              "definitions": {},
              "properties": {
                "notify": {
                  "type": "string",
                  "enum": [
                    "email",
                    "push",
                    "none"
                  ],
                  "description": "Notification type"
                }
              },
              "type": "object",
              "required": [
                "notify"
              ],
              "description": "Query parameters"
            },
            "params": {
              "x-isDto": true,
              "definitions": {},
              "properties": {
                "id": {
                  "format": "uuid",
                  "type": "string",
                  "description": "User ID"
                }
              },
              "type": "object",
              "required": [
                "id"
              ],
              "description": "Path parameters"
            },
            "output": {
              "x-isDto": true,
              "definitions": {},
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Success status"
                }
              },
              "type": "object",
              "required": [
                "success"
              ],
              "description": "Response object"
            }
          },
          "operationObject": {
            "summary": "Update user (DTO)",
            "description": "Update user by ID with DTO validation"
          },
          "path": "{id}",
          "httpMethod": "POST"
        }
      }
    },
    "UserArktypeRPC": {
      "rpcModuleName": "UserArktypeRPC",
      "originalControllerName": "UserArktypeController",
      "prefix": "users-arktype",
      "handlers": {
        "updateUser": {
          "validation": {
            "body": {
              "$schema": "https://json-schema.org/draft/2020-12/schema",
              "type": "object",
              "properties": {
                "age": {
                  "type": "number",
                  "description": "User age",
                  "exclusiveMaximum": 120,
                  "exclusiveMinimum": 0
                },
                "email": {
                  "type": "string",
                  "description": "User email",
                  "pattern": "^[\\w%+.-]+@[\\d.A-Za-z-]+\\.[A-Za-z]{2,}$",
                  "format": "email"
                },
                "name": {
                  "type": "string",
                  "description": "User full name"
                }
              },
              "required": [
                "age",
                "email",
                "name"
              ]
            },
            "query": {
              "$schema": "https://json-schema.org/draft/2020-12/schema",
              "type": "object",
              "properties": {
                "notify": {
                  "anyOf": [
                    {
                      "const": "email",
                      "description": "Notification type"
                    },
                    {
                      "const": "none",
                      "description": "Notification type"
                    },
                    {
                      "const": "push",
                      "description": "Notification type"
                    }
                  ],
                  "description": "Notification type"
                }
              },
              "required": [
                "notify"
              ]
            },
            "params": {
              "$schema": "https://json-schema.org/draft/2020-12/schema",
              "type": "object",
              "properties": {
                "id": {
                  "anyOf": [
                    {
                      "type": "string",
                      "description": "User ID",
                      "format": "uuid",
                      "pattern": "[\\da-f]{8}-[\\da-f]{4}-[1-8][\\da-f]{3}-[89ab][\\da-f]{3}-[\\da-f]{12}"
                    },
                    {
                      "const": "00000000-0000-0000-0000-000000000000",
                      "description": "User ID",
                      "format": "uuid"
                    },
                    {
                      "const": "ffffffff-ffff-ffff-ffff-ffffffffffff",
                      "description": "User ID",
                      "format": "uuid"
                    }
                  ],
                  "description": "User ID",
                  "format": "uuid"
                }
              },
              "required": [
                "id"
              ]
            },
            "output": {
              "$schema": "https://json-schema.org/draft/2020-12/schema",
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Success status"
                }
              },
              "required": [
                "success"
              ]
            }
          },
          "operationObject": {
            "summary": "Update user (Arktype)",
            "description": "Update user by ID with Arktype validation"
          },
          "path": "{id}",
          "httpMethod": "POST"
        }
      }
    },
    "UserValibotRPC": {
      "rpcModuleName": "UserValibotRPC",
      "originalControllerName": "UserValibotController",
      "prefix": "users-valibot",
      "handlers": {
        "updateUser": {
          "validation": {
            "body": {
              "$schema": "http://json-schema.org/draft-07/schema#",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "User full name"
                },
                "age": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 120,
                  "description": "User age"
                },
                "email": {
                  "type": "string",
                  "format": "email",
                  "description": "User email"
                },
                "file": {
                  "type": "string",
                  "format": "binary",
                  "description": "User file"
                }
              },
              "required": [
                "name",
                "age",
                "email",
                "file"
              ],
              "description": "User object"
            },
            "query": {
              "$schema": "http://json-schema.org/draft-07/schema#",
              "type": "object",
              "properties": {
                "notify": {
                  "enum": [
                    "email",
                    "push",
                    "none"
                  ],
                  "description": "Notification type"
                }
              },
              "required": [
                "notify"
              ]
            },
            "params": {
              "$schema": "http://json-schema.org/draft-07/schema#",
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "User ID"
                }
              },
              "required": [
                "id"
              ]
            },
            "output": {
              "$schema": "http://json-schema.org/draft-07/schema#",
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Success status"
                }
              },
              "required": [
                "success"
              ],
              "description": "Response object"
            }
          },
          "operationObject": {
            "summary": "Update user (Valibot)",
            "description": "Update user by ID with Valibot validation"
          },
          "path": "{id}",
          "httpMethod": "POST"
        }
      }
    },
    "HelloWorldRPC": {
      "rpcModuleName": "HelloWorldRPC",
      "originalControllerName": "HelloWorldController",
      "prefix": "hello-world",
      "handlers": {
        "getHello": {
          "path": "greeting",
          "httpMethod": "GET",
          "operationObject": {
            "summary": "Get a greeting",
            "description": "Get a greeting from the server"
          }
        },
        "postHello": {
          "path": "greeting",
          "httpMethod": "POST",
          "operationObject": {
            "summary": "Post a greeting",
            "description": "Post a greeting to the server"
          }
        }
      }
    },
    "BasicRPCWithService": {
      "rpcModuleName": "BasicRPCWithService",
      "originalControllerName": "HelloWorldControllerWithService",
      "prefix": "hello-world-with-service",
      "handlers": {
        "getHello": {
          "path": "greeting",
          "httpMethod": "GET",
          "operationObject": {
            "summary": "Get a greeting using a service",
            "description": "Get a greeting from the server using a service"
          }
        }
      }
    },
    "JSONLinesRPC": {
      "rpcModuleName": "JSONLinesRPC",
      "originalControllerName": "JSONLinesController",
      "prefix": "jsonlines",
      "handlers": {
        "streamTokens": {
          "path": "tokens",
          "httpMethod": "GET",
          "operationObject": {
            "summary": "Stream tokens",
            "description": "Stream tokens to the client"
          }
        }
      }
    },
    "JSONLinesResponseRPC": {
      "rpcModuleName": "JSONLinesResponseRPC",
      "originalControllerName": "JSONLinesResponseController",
      "prefix": "jsonlines-response-object",
      "handlers": {
        "streamTokens": {
          "path": "tokens",
          "httpMethod": "GET",
          "operationObject": {
            "summary": "Stream tokens using Response object",
            "description": "Stream tokens to the client using Response object"
          }
        }
      }
    },
    "OpenAiRPC": {
      "rpcModuleName": "OpenAiRPC",
      "originalControllerName": "OpenAiController",
      "prefix": "openai",
      "handlers": {
        "createChatCompletion": {
          "path": "chat",
          "httpMethod": "POST",
          "operationObject": {
            "summary": "Create a chat completion",
            "description": "Create a chat completion using OpenAI and yield the response"
          }
        }
      }
    },
    "AiSdkRPC": {
      "rpcModuleName": "AiSdkRPC",
      "originalControllerName": "AiSdkController",
      "prefix": "ai-sdk",
      "handlers": {
        "chat": {
          "path": "chat",
          "httpMethod": "POST",
          "operationObject": {
            "summary": "Vercel AI SDK",
            "description": "Uses [@ai-sdk/openai](https://www.npmjs.com/package/@ai-sdk/openai) and ai packages to chat with an AI model"
          }
        },
        "functionCalling": {
          "path": "function-calling",
          "httpMethod": "POST",
          "operationObject": {
            "summary": "Vercel AI SDK with Function Calling",
            "description": "Uses [@ai-sdk/openai](https://www.npmjs.com/package/@ai-sdk/openai) and ai packages to call a function"
          }
        }
      }
    },
    "ProxyRPC": {
      "rpcModuleName": "ProxyRPC",
      "originalControllerName": "ProxyController",
      "prefix": "proxy",
      "handlers": {
        "getHello": {
          "path": "greeting",
          "httpMethod": "GET",
          "operationObject": {
            "summary": "Proxy endpoint",
            "description": "Get a greeting from vovk.dev"
          }
        }
      }
    },
    "PollRPC": {
      "rpcModuleName": "PollRPC",
      "originalControllerName": "PollController",
      "prefix": "poll",
      "handlers": {
        "streamPollResponse": {
          "validation": {
            "query": {
              "$schema": "https://json-schema.org/draft/2020-12/schema",
              "type": "object",
              "properties": {
                "i": {
                  "type": "string"
                }
              },
              "required": [
                "i"
              ],
              "additionalProperties": false
            },
            "iteration": {
              "$schema": "https://json-schema.org/draft/2020-12/schema",
              "type": "object",
              "properties": {
                "i": {
                  "type": "number"
                }
              },
              "required": [
                "i"
              ],
              "additionalProperties": false
            }
          },
          "path": "",
          "httpMethod": "GET"
        }
      }
    },
    "ProgressiveRPC": {
      "rpcModuleName": "ProgressiveRPC",
      "originalControllerName": "ProgressiveController",
      "prefix": "progressive",
      "handlers": {
        "streamProgressiveResponse": {
          "validation": {
            "iteration": {
              "$schema": "https://json-schema.org/draft/2020-12/schema",
              "anyOf": [
                {
                  "type": "object",
                  "properties": {
                    "users": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number"
                          },
                          "name": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "name"
                        ],
                        "additionalProperties": false
                      }
                    }
                  },
                  "required": [
                    "users"
                  ],
                  "additionalProperties": false
                },
                {
                  "type": "object",
                  "properties": {
                    "tasks": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number"
                          },
                          "title": {
                            "type": "string"
                          },
                          "completed": {
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "id",
                          "title",
                          "completed"
                        ],
                        "additionalProperties": false
                      }
                    }
                  },
                  "required": [
                    "tasks"
                  ],
                  "additionalProperties": false
                }
              ]
            }
          },
          "path": "",
          "httpMethod": "GET"
        }
      }
    },
    "FormZodRPC": {
      "rpcModuleName": "FormZodRPC",
      "originalControllerName": "FormZodController",
      "prefix": "form-zod",
      "handlers": {
        "submitForm": {
          "validation": {
            "body": {
              "$schema": "https://json-schema.org/draft/2020-12/schema",
              "description": "User object",
              "type": "object",
              "properties": {
                "email": {
                  "description": "User email",
                  "type": "string",
                  "format": "email",
                  "pattern": "^(?!\\.)(?!.*\\.\\.)([A-Za-z0-9_'+\\-\\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\\-]*\\.)+[A-Za-z]{2,}$"
                },
                "resume": {
                  "description": "Resume file",
                  "examples": [
                    "application/pdf"
                  ],
                  "type": "string",
                  "format": "binary",
                  "contentEncoding": "binary",
                  "contentMediaType": "image/png"
                },
                "portfolioSamples": {
                  "description": "Portfolio samples",
                  "anyOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": "binary",
                        "contentEncoding": "binary"
                      }
                    },
                    {
                      "type": "string",
                      "format": "binary",
                      "contentEncoding": "binary"
                    }
                  ]
                }
              },
              "required": [
                "email",
                "resume",
                "portfolioSamples"
              ],
              "additionalProperties": false,
              "x-isForm": true
            },
            "params": {
              "$schema": "https://json-schema.org/draft/2020-12/schema",
              "type": "object",
              "properties": {
                "id": {
                  "description": "User ID",
                  "type": "string",
                  "format": "uuid",
                  "pattern": "^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$"
                }
              },
              "required": [
                "id"
              ],
              "additionalProperties": false
            },
            "output": {
              "$schema": "https://json-schema.org/draft/2020-12/schema",
              "description": "Response object",
              "type": "object",
              "properties": {
                "email": {
                  "description": "User email",
                  "type": "string",
                  "format": "email",
                  "pattern": "^(?!\\.)(?!.*\\.\\.)([A-Za-z0-9_'+\\-\\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\\-]*\\.)+[A-Za-z]{2,}$"
                },
                "resume": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "Resume file name",
                      "examples": [
                        "resume.pdf"
                      ],
                      "type": "string"
                    },
                    "size": {
                      "description": "Resume file size",
                      "type": "number",
                      "minimum": 0
                    },
                    "type": {
                      "description": "Resume file type",
                      "examples": [
                        "application/pdf"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "size",
                    "type"
                  ],
                  "additionalProperties": false
                },
                "portfolioSamples": {
                  "description": "Array of portfolio sample files",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Portfolio sample file name",
                        "examples": [
                          "portfolio.zip"
                        ],
                        "type": "string"
                      },
                      "size": {
                        "description": "Portfolio sample file size",
                        "type": "number",
                        "minimum": 0
                      },
                      "type": {
                        "description": "Portfolio sample file type",
                        "examples": [
                          "application/zip"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "size",
                      "type"
                    ],
                    "additionalProperties": false
                  }
                }
              },
              "required": [
                "email",
                "resume",
                "portfolioSamples"
              ],
              "additionalProperties": false
            }
          },
          "operationObject": {
            "summary": "Submit form (Zod)",
            "description": "Submit form with Zod validation"
          },
          "path": "{id}",
          "httpMethod": "POST"
        }
      }
    }
  }
}