// Generated by vovk-cli v0.0.1-draft.390 at 2025-11-01T15:50:58.441Z
import type { VovkFetcher } from 'vovk';
import { createRPC } from 'vovk';
import { schema } from './schema.ts';

// TODO: This is a temporary fix https://github.com/rolldown/tsdown/issues/528#issuecomment-3476284358
import openapi from './openapi.json' with { type: 'json' };

import type { Controllers as Controllers0 } from '../app/api/[[...vovk]]/route.ts';

import type { Controllers as Controllers1 } from '../app/api/static/[[...vovk]]/route.ts';

export const UserZodRPC = createRPC<
  Controllers0['UserZodRPC'],
  typeof import('vovk').fetcher extends VovkFetcher<infer U> ? U : never
>(schema, '', 'UserZodRPC', import('vovk'), {
  validateOnClient: import('vovk-ajv'),
  apiRoot: 'http://localhost:3001/api',
});

export const UserZodWithServiceRPC = createRPC<
  Controllers0['UserZodWithServiceRPC'],
  typeof import('vovk').fetcher extends VovkFetcher<infer U> ? U : never
>(schema, '', 'UserZodWithServiceRPC', import('vovk'), {
  validateOnClient: import('vovk-ajv'),
  apiRoot: 'http://localhost:3001/api',
});

export const UserYupRPC = createRPC<
  Controllers0['UserYupRPC'],
  typeof import('vovk').fetcher extends VovkFetcher<infer U> ? U : never
>(schema, '', 'UserYupRPC', import('vovk'), {
  validateOnClient: import('vovk-ajv'),
  apiRoot: 'http://localhost:3001/api',
});

export const UserDtoRPC = createRPC<
  Controllers0['UserDtoRPC'],
  typeof import('vovk').fetcher extends VovkFetcher<infer U> ? U : never
>(schema, '', 'UserDtoRPC', import('vovk'), {
  validateOnClient: import('vovk-ajv'),
  apiRoot: 'http://localhost:3001/api',
});

export const UserArktypeRPC = createRPC<
  Controllers0['UserArktypeRPC'],
  typeof import('vovk').fetcher extends VovkFetcher<infer U> ? U : never
>(schema, '', 'UserArktypeRPC', import('vovk'), {
  validateOnClient: import('vovk-ajv'),
  apiRoot: 'http://localhost:3001/api',
});

export const UserValibotRPC = createRPC<
  Controllers0['UserValibotRPC'],
  typeof import('vovk').fetcher extends VovkFetcher<infer U> ? U : never
>(schema, '', 'UserValibotRPC', import('vovk'), {
  validateOnClient: import('vovk-ajv'),
  apiRoot: 'http://localhost:3001/api',
});

export const BasicRPC = createRPC<
  Controllers0['BasicRPC'],
  typeof import('vovk').fetcher extends VovkFetcher<infer U> ? U : never
>(schema, '', 'BasicRPC', import('vovk'), {
  validateOnClient: import('vovk-ajv'),
  apiRoot: 'http://localhost:3001/api',
});

export const BasicRPCWithService = createRPC<
  Controllers0['BasicRPCWithService'],
  typeof import('vovk').fetcher extends VovkFetcher<infer U> ? U : never
>(schema, '', 'BasicRPCWithService', import('vovk'), {
  validateOnClient: import('vovk-ajv'),
  apiRoot: 'http://localhost:3001/api',
});

export const JSONLinesRPC = createRPC<
  Controllers0['JSONLinesRPC'],
  typeof import('vovk').fetcher extends VovkFetcher<infer U> ? U : never
>(schema, '', 'JSONLinesRPC', import('vovk'), {
  validateOnClient: import('vovk-ajv'),
  apiRoot: 'http://localhost:3001/api',
});

export const JSONLinesResponseRPC = createRPC<
  Controllers0['JSONLinesResponseRPC'],
  typeof import('vovk').fetcher extends VovkFetcher<infer U> ? U : never
>(schema, '', 'JSONLinesResponseRPC', import('vovk'), {
  validateOnClient: import('vovk-ajv'),
  apiRoot: 'http://localhost:3001/api',
});

export const OpenAiRPC = createRPC<
  Controllers0['OpenAiRPC'],
  typeof import('vovk').fetcher extends VovkFetcher<infer U> ? U : never
>(schema, '', 'OpenAiRPC', import('vovk'), {
  validateOnClient: import('vovk-ajv'),
  apiRoot: 'http://localhost:3001/api',
});

export const AiSdkRPC = createRPC<
  Controllers0['AiSdkRPC'],
  typeof import('vovk').fetcher extends VovkFetcher<infer U> ? U : never
>(schema, '', 'AiSdkRPC', import('vovk'), {
  validateOnClient: import('vovk-ajv'),
  apiRoot: 'http://localhost:3001/api',
});

export const ProxyRPC = createRPC<
  Controllers0['ProxyRPC'],
  typeof import('vovk').fetcher extends VovkFetcher<infer U> ? U : never
>(schema, '', 'ProxyRPC', import('vovk'), {
  validateOnClient: import('vovk-ajv'),
  apiRoot: 'http://localhost:3001/api',
});

export const PollRPC = createRPC<
  Controllers0['PollRPC'],
  typeof import('vovk').fetcher extends VovkFetcher<infer U> ? U : never
>(schema, '', 'PollRPC', import('vovk'), {
  validateOnClient: import('vovk-ajv'),
  apiRoot: 'http://localhost:3001/api',
});

export const ProgressiveRPC = createRPC<
  Controllers0['ProgressiveRPC'],
  typeof import('vovk').fetcher extends VovkFetcher<infer U> ? U : never
>(schema, '', 'ProgressiveRPC', import('vovk'), {
  validateOnClient: import('vovk-ajv'),
  apiRoot: 'http://localhost:3001/api',
});

export const FormZodRPC = createRPC<
  Controllers0['FormZodRPC'],
  typeof import('vovk').fetcher extends VovkFetcher<infer U> ? U : never
>(schema, '', 'FormZodRPC', import('vovk'), {
  validateOnClient: import('vovk-ajv'),
  apiRoot: 'http://localhost:3001/api',
});

export const OpenApiRPC = createRPC<
  Controllers1['OpenApiRPC'],
  typeof import('vovk').fetcher extends VovkFetcher<infer U> ? U : never
>(schema, 'static', 'OpenApiRPC', import('vovk'), {
  validateOnClient: import('vovk-ajv'),
  apiRoot: 'http://localhost:3001/api',
});

export const StaticParamsRPC = createRPC<
  Controllers1['StaticParamsRPC'],
  typeof import('vovk').fetcher extends VovkFetcher<infer U> ? U : never
>(schema, 'static', 'StaticParamsRPC', import('vovk'), {
  validateOnClient: import('vovk-ajv'),
  apiRoot: 'http://localhost:3001/api',
});

export { schema, openapi };
